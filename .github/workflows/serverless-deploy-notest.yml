name: Serverless Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      Version:
        description: 'Set image version'
        required: true
        default: 'latest'  

defaults:
  run:
    working-directory: ./backend

env:
  AWS_REGION: "eu-west-1"                   
  ECR_REPOSITORY: "app-challenge-repo"          
  ECS_SERVICE: "app-challenge-service"                 
  ECS_CLUSTER: "app-challenge"
  ECS_TASK_DEFINITION: ".aws/task-definition.json"                      
  CONTAINER_NAME: "fargate-app"
  DB_PORT: "5432"
  DB_DIALECT: "postgres"
  DB_NAME_TEST: "app_challenge_db"
  DB_NAME_DEVELOPMENT: "app_challenge_db"
  DB_NAME_PRODUCTION: "app_challenge_db"
  JWTKEY: "jwtsecret"
  TOKEN: "jwtToken"
  TOKEN_EXPIRATION: "144h"
  BEARER: "Bearer"
  CLIENT_URL: "https://app.biedka.com"
  SENTRY_DSN: "https://cf5fb7bbd88e49b19faa0076ef224214@o1051130.ingest.sentry.io/6071184"
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}

jobs:
  integration:
    name: "Test"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: "install dependencies"
        run: npm install
  deploy:
    needs: integration
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS..
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
